     1                                  ;CPU 686
     2                                  CPU P3
     3                                  
     4                                  USEZBUFFER EQU 1          ;To disable, put ; in front of line
     5                                  LVSID EQU 10              ;log2(VSID) - used for mip-mapping index adjustment
     6                                  %DEFINE	VSID (1 << LVSID) ;should match VSID in VOXLAP5.H (adjust LVSID, not this)
     7                                  %DEFINE	LOGPREC	(8+12)
     8                                  
     9                                  EXTERN _gi       ; dword
    10                                  EXTERN _gpixy    ; dword
    11                                  EXTERN _gixy     ; dword      ;long[2]
    12                                  EXTERN _gpz      ; dword      ;long[2]
    13                                  EXTERN _gdz      ; dword      ;long[2]
    14                                  EXTERN _gxmip    ; dword
    15                                  EXTERN _gxmax    ; dword
    16                                  EXTERN _gcsub    ; dword      ;long[4]
    17                                  EXTERN _gylookup ; dword      ;long[256+4+128+4+...]
    18                                  EXTERN _gmipnum  ; dword
    19                                  ;EXTERN _cf       ; dword      ;{ long i0,i1,z0,z1,cx0,cy0,cx1,cy1; }[128]
    20                                  
    21                                  EXTERN _sptr     ; dword
    22                                  
    23                                  EXTERN _skyoff   ; dword      ;Memory offset to start of longitude line
    24                                  EXTERN _skyxsiz  ; dword      ;Size of longitude line
    25                                  EXTERN _skylat   ; dword      ;long[_skyxsiz] : latitude's unit dir. vector
    26                                  
    27                                  ;How to declare C-ASM shared variables in the ASM code:
    28                                  ;ASM:                    C:
    29                                  ;   GLOBAL _xr0             extern void *xr0;
    30                                  ;   ALIGN 16                #define lxr0 ((long *)&xr0)
    31                                  ;   _xr0: dd 0,0,0,0        #define fxr0 ((float *)&xr0)
    32                                  ;   Use: _xr0               Use: lxr0[0-3]  or:  fxr0[0-3]
    33                                  
    34                                  ;EXTERN _reax; dword
    35                                  ;EXTERN _rebx; dword
    36                                  ;EXTERN _recx; dword
    37                                  ;EXTERN _redx; dword
    38                                  ;EXTERN _resi; dword
    39                                  ;EXTERN _redi; dword
    40                                  ;EXTERN _rebp; dword
    41                                  ;EXTERN _resp; dword
    42                                  ;EXTERN _remm; dword  ;long[16]
    43                                  
    44                                  SEGMENT	.text	PUBLIC	USE32	CLASS=CODE
    45                                  
    46                                  
    47                                  GLOBAL _v5_asm_dep_unlock ;Data Execution Prevention unlock (works under XP2 SP2)
    48                                  _v5_asm_dep_unlock:
    49                                  	EXTERN __imp__VirtualProtect@16 ; near
    50 00000000 83EC04                  	sub esp, 4
    51 00000003 54                      	push dword esp
    52 00000004 6A40                    	push dword 40h ;PAGE_EXECUTE_READWRITE ; _MANUAL FIX_ word to dword
    53 00000006 B8[5B740000]            	mov eax, _dep_protect_end
    54 0000000B 2D[00000000]            	sub eax, _v5_asm_dep_unlock
    55 00000010 50                      	push dword eax
    56 00000011 68[00000000]            	push dword _v5_asm_dep_unlock
    57 00000016 E8(00000000)            	call dword __imp__VirtualProtect@16
    58 0000001B 83C404                  	add esp, 4
    59 0000001E C3                      	retn
    60                                  
    61                                  GLOBAL	_cfasm, _skycast
    62 0000001F 90                      ALIGN 16
    63 00000020 00<rept>                _cfasm times 256*32 db 0
    64 00002020 FF00FF00FF00FF00        w8bmask0 dq 000ff00ff00ff00ffh
    65 00002028 F000F000F000F000        w8bmask1 dq 000f000f000f000f0h
    66 00002030 E000E000E000E000        w8bmask2 dq 000e000e000e000e0h
    67                                  ;gyadd dq ((-1) SHL (LOGPREC-16))
    68 00002038 0000FFFF0000FFFF        mmask dq 0ffff0000ffff0000h
    69 00002040 0000000000000000        _skycast dq 0
    70 00002048 00000000                gylookoff dd 0
    71 0000204C 00000000                ngxmax dd 0
    72 00002050 00000000                ce dd 0
    73 00002054 00000000                espbak dd 0
    74                                  
    75 00002058 [00000000]              gylut  dd _gylookup
    76 0000205C [10040000]              		 dd _gylookup+(4*1+256)*4
    77 00002060 [20060000]              		 dd _gylookup+(4*2+384)*4
    78 00002064 [30070000]              		 dd _gylookup+(4*3+448)*4
    79 00002068 [C0070000]              		 dd _gylookup+(4*4+480)*4
    80 0000206C [10080000]              		 dd _gylookup+(4*5+496)*4
    81 00002070 [40080000]              		 dd _gylookup+(4*6+504)*4
    82 00002074 [60080000]              		 dd _gylookup+(4*7+508)*4
    83 00002078 [78080000]              		 dd _gylookup+(4*8+510)*4
    84                                  
    85 0000207C FE070000                gxmipk dd ((1 << (LVSID-0))-1)*2
    86 00002080 FE030000                		 dd ((1 << (LVSID-1))-1)*2
    87 00002084 FE010000                		 dd ((1 << (LVSID-2))-1)*2
    88 00002088 FE000000                		 dd ((1 << (LVSID-3))-1)*2
    89 0000208C 7E000000                		 dd ((1 << (LVSID-4))-1)*2
    90 00002090 3E000000                		 dd ((1 << (LVSID-5))-1)*2
    91 00002094 1E000000                		 dd ((1 << (LVSID-6))-1)*2
    92 00002098 0E000000                		 dd ((1 << (LVSID-7))-1)*2
    93 0000209C 06000000                		 dd ((1 << (LVSID-8))-1)*2
    94                                  
    95 000020A0 00F03F00                gymipk dd ((1 << (LVSID-0))-1) << (LVSID+2)
    96 000020A4 00F80F00                		 dd ((1 << (LVSID-1))-1) << (LVSID+1)
    97 000020A8 00FC0300                		 dd ((1 << (LVSID-2))-1) << (LVSID  )
    98 000020AC 00FE0000                		 dd ((1 << (LVSID-3))-1) << (LVSID-1)
    99 000020B0 003F0000                		 dd ((1 << (LVSID-4))-1) << (LVSID-2)
   100 000020B4 800F0000                		 dd ((1 << (LVSID-5))-1) << (LVSID-3)
   101 000020B8 C0030000                		 dd ((1 << (LVSID-6))-1) << (LVSID-4)
   102 000020BC E0000000                		 dd ((1 << (LVSID-7))-1) << (LVSID-5)
   103 000020C0 30000000                		 dd ((1 << (LVSID-8))-1) << (LVSID-6)
   104                                  
   105 000020C4 [00000000]              gamipk dd _sptr
   106 000020C8 [00004000]              		 dd _sptr+(VSID*VSID)*4
   107 000020CC [00005000]              		 dd _sptr+(VSID*VSID + (VSID*VSID >> 2))*4
   108 000020D0 [00005400]              		 dd _sptr+(VSID*VSID + (VSID*VSID >> 2) + (VSID*VSID >> 4))*4
   109 000020D4 [00005500]              		 dd _sptr+(VSID*VSID + (VSID*VSID >> 2) + (VSID*VSID >> 4) + (VSID*VSID >> 6))*4
   110 000020D8 [00405500]              		 dd _sptr+(VSID*VSID + (VSID*VSID >> 2) + (VSID*VSID >> 4) + (VSID*VSID >> 6) + (VSID*VSID >> 8))*4
   111 000020DC [00505500]              		 dd _sptr+(VSID*VSID + (VSID*VSID >> 2) + (VSID*VSID >> 4) + (VSID*VSID >> 6) + (VSID*VSID >> 8) + (VSID*VSID >> 10))*4
   112 000020E0 [00545500]              		 dd _sptr+(VSID*VSID + (VSID*VSID >> 2) + (VSID*VSID >> 4) + (VSID*VSID >> 6) + (VSID*VSID >> 8) + (VSID*VSID >> 10) + (VSID*VSID >> 12))*4
   113 000020E4 [00555500]              		 dd _sptr+(VSID*VSID + (VSID*VSID >> 2) + (VSID*VSID >> 4) + (VSID*VSID >> 6) + (VSID*VSID >> 8) + (VSID*VSID >> 10) + (VSID*VSID >> 12) + (VSID*VSID >> 14))*4
   114                                  
   115 000020E8 00                      gmipcnt db 0
   116 000020E9 90<rept>                ALIGN 16
   117                                  
   118                                  	;THE INNER LOOP:
   119                                  	;#ifdef CPU <= PENTIUM II
   120                                  	;
   121                                  	;   movd mm3, _gylookup[ecx*4] ;mm3: [ 0   0   0  -gy]
   122                                  	;   por mm3, mm6               ;mm3: [ogx  0   gx -gy]
   123                                  	;      or:
   124                                  	;   paddd mm3, gyadd           ;where: gyadd: dq ((-1) SHL (LOGPREC-16))
   125                                  	;
   126                                  	;   ...
   127                                  	;
   128                                  	;   movq mm7, mm0           ;mm7: [cy0.... cx0....]
   129                                  	;   psrad mm7, 16           ;mm7: [----cy0 ----cx0]
   130                                  	;   packssdw mm7, mm7       ;mm7: [cy0 cx0 cy0 cx0]
   131                                  	;   pmaddwd mm7, mm3           ;mm7: [ 0   0  -decide]
   132                                  	;   movd eax, mm7
   133                                  	;   test eax, eax
   134                                  	;   j ?
   135                                  	;   ...
   136                                  	;   paddd mm0, _gi
   137                                  	;
   138                                  	;#else
   139                                  	;      ;Do this only when gx/ogx changes
   140                                  	;   movd mm3, ogx                   ;mm3: [ 0   0  ogx  0 ]
   141                                  	;      or:
   142                                  	;   pshufw mm3, mm3, 0e8h            ;mm3: [ gx ogx ogx  0 ]
   143                                  	;
   144                                  	;      ;Do this only when ecx/edx changes
   145                                  	;   pinsrw mm3, _gylookup[ecx*2], 0 ;mm3: [ 0   0  ogx -gy]
   146                                  	;      or:
   147                                  	;   paddd mm3, gyadd                ;where: gyadd: dq (1 SHL LOGPREC)
   148                                  	;
   149                                  	;   ...
   150                                  	;
   151                                  	;   pshufw mm7, mm0, 0ddh      ;mm7: [cy0 cx0 cy0 cx0]
   152                                  	;   pmaddwd mm7, mm3           ;mm7: [ 0   0  -decide]
   153                                  	;   movd eax, mm7
   154                                  	;   test eax, eax
   155                                  	;   j ?
   156                                  	;   ...
   157                                  	;   paddd mm0, _gi
   158                                  	;
   159                                  	;#endif
   160                                  
   161                                  
   162                                  	;   Register allocation:
   163                                  	;eax: [.temp1.]     mm0: [cy0.... cx0....]
   164                                  	;ebx: [.temp2.]     mm1: [cy1.... cx1....]
   165                                  	;ecx: [.....z0]     mm2: [    temp!!!    ]   //gi[1].. gi[0]..]
   166                                  	;edx: [.....z1]     mm3: [     temp      ]
   167                                  	;esi: [..ixy..]     mm4: [??????? csub...]
   168                                  	;edi: [..v[]..]     mm5: [??????? coltemp]
   169                                  	;ebp: [...bakj]     mm6: [gx. 0.. ogx 0..]
   170                                  	;esp: [..c->..]     mm7: [     temp      ]
   171                                  GLOBAL	_grouscanasm ;Visual C entry point (passes parameters by stack)
   172                                  _grouscanasm:
   173 000020F0 8B442404                	mov eax, [esp+4]
   174 000020F4 53                      	push ebx   ;Visual C's _cdecl requires EBX,ESI,EDI,EBP to be preserved
   175 000020F5 56                      	push esi
   176 000020F6 57                      	push edi
   177 000020F7 55                      	push ebp
   178 000020F8 8925[54200000]          	mov dword [espbak], esp
   179                                  
   180 000020FE 89C7                    	mov edi, eax
   181                                  
   182                                  		;cfasm:   0-2047  (extra memory for stack)
   183                                  		;      2048-4095  c and ce always sit in this range ((esp = c) <= ce)
   184                                  		;      4096-6143  This is where memory for cfasm is actually stored!
   185                                  		;      6144-8191  (memory never used - this seems unnecessary?)
   186 00002100 BC[20080000]            	mov esp, _cfasm+2048 ; _MANUAL FIX_ "offset" in masm means don't bracket
   187 00002105 B8[20100000]            	mov eax, _cfasm+4096 ; _MANUAL FIX_ "offset" in masm means don't bracket
   188 0000210A 8B4808                  	mov ecx, [eax+8]
   189 0000210D 8B500C                  	mov edx, [eax+12]
   190 00002110 0F6F4010                	movq mm0, [eax+16]
   191 00002114 0F6F4818                	movq mm1, [eax+24]
   192 00002118 8925[50200000]          	mov dword [ce], esp
   193                                  
   194 0000211E C705[48200000]-         	mov DWORD [gylookoff], _gylookup
   195 00002124 [00000000]         
   196 00002128 C605[E8200000]00        	mov byte [gmipcnt], 0
   197                                  
   198 0000212F 8B2D[00000000]          	mov ebp, [_gxmax]
   199 00002135 803D[00000000]01        	cmp byte [_gmipnum], 1
   200 0000213C 7E0E                    	jle short skipngxmax0
   201 0000213E 3B2D[00000000]          	cmp ebp, [_gxmip]
   202 00002144 7E06                    	jle short skipngxmax0
   203 00002146 8B2D[00000000]          	mov ebp, [_gxmip]
   204                                  skipngxmax0:
   205 0000214C 892D[4C200000]          	mov [ngxmax], ebp
   206                                  
   207 00002152 8B2D[04000000]          	mov ebp, [_gpz+4]
   208 00002158 2B2D[00000000]          	sub ebp, [_gpz+0]
   209 0000215E C1ED1F                  	shr ebp, 31
   210 00002161 0F6E34AD[00000000]      	movd mm6, DWORD [_gpz+ebp*4]        ;update gx in mm6
   211 00002169 0FDB35[38200000]        	pand mm6, qword [mmask] ; _MANUAL FIX_ square-bracketed operand 2
   212 00002170 8B04AD[00000000]        	mov eax, [_gdz+ebp*4]
   213 00002177 0104AD[00000000]        	add DWORD [_gpz+ebp*4], eax
   214                                  
   215 0000217E 8B35[00000000]          	mov esi, [_gpixy]
   216 00002184 3B3E                    	cmp edi, [esi]
   217 00002186 0F844F010000            	je drawflor
   218 0000218C E9EA000000              	jmp drawceil
   219                                  
   220                                  drawfwall:
   221 00002191 0FB64701                	movzx eax, byte [edi+1]
   222 00002195 39D0                    	cmp eax, edx
   223 00002197 7D65                    	jge drawcwall
   224 00002199 8B9C2404080000          	mov ebx, [esp+4+2048]
   225                                  loop0:
   226 000021A0 F7D8                    	neg eax
   227 000021A2 01D0                    	add eax, edx
   228 000021A4 4A                      	dec edx
   229 000021A5 0F602C87                	punpcklbw mm5, [edi+eax*4]
   230 000021A9 A1[48200000]            	mov eax, [gylookoff]
   231 000021AE 0F6E1C90                	movd mm3, dword [eax+edx*4] ;mm3: [ 0   0   0  -gy]
   232 000021B2 0FD8EC                  	psubusb mm5, mm4
   233 000021B5 0F70D5FF                	pshufw mm2, mm5, 0ffh
   234 000021B9 0FE4EA                  	pmulhuw mm5, mm2
   235 000021BC 0F71D507                	psrlw mm5, 7
   236 000021C0 0F67ED                  	packuswb mm5, mm5
   237                                  %ifdef USEZBUFFER
   238                                  	punpckldq mm5, mm6         ;Stuff ogx into hi part of color for Z buffer
   239                                  %endif
   240 000021C3 0FEBDE                  	por mm3, mm6               ;mm3: [ gx  0  ogx -gy]
   241                                  loop1: ;if (dmulrethigh(gylookup[edx*4],c->cx1,c->cy1,ogx) >= 0) jmp endloop1
   242 000021C6 0F70F9DD                	pshufw mm7, mm1, 0ddh      ;mm7: [cy1 cx1 cy1 cx1]
   243 000021CA 0FF5FB                  	pmaddwd mm7, mm3           ;mm7: [ 0   0  -decide]
   244 000021CD 0F7EF8                  	movd eax, mm7
   245 000021D0 85C0                    	test eax, eax              ;if (cy1*ogx ? gy*cx1)
   246 000021D2 7E1B                    	jle endloop1
   247 000021D4 0FFA0D[00000000]        	psubd mm1, qword [_gi]
   248                                  %ifdef USEZBUFFER
   249                                  	movntq [ebx], mm5
   250                                  	sub ebx, 8
   251                                  %else
   252 000021DB 0F7E2B                  	movd [ebx], mm5
   253 000021DE 83EB04                  	sub ebx, 4
   254                                  %endif
   255 000021E1 3B9C2400080000          	cmp ebx, [esp+2048]
   256 000021E8 73DC                    	jnb loop1
   257 000021EA E93D050000              	jmp predeletez
   258                                  endloop1:
   259 000021EF 0FB64701                	movzx eax, byte [edi+1]
   260 000021F3 39D0                    	cmp eax, edx
   261 000021F5 75A9                    	jne loop0
   262 000021F7 899C2404080000          	mov [esp+4+2048], ebx
   263                                  
   264                                  drawcwall:
   265 000021FE 3B3E                    	cmp edi, [esi]
   266 00002200 89C2                    	mov edx, eax
   267 00002202 0F84CF000000            	je predrawflor
   268                                  
   269 00002208 0FB64703                	movzx eax, byte [edi+3]
   270 0000220C 39C8                    	cmp eax, ecx
   271 0000220E 7E65                    	jle predrawceil
   272 00002210 8B9C2400080000          	mov ebx, [esp+2048]
   273                                  loop2:
   274 00002217 F7D8                    	neg eax
   275 00002219 01C8                    	add eax, ecx
   276 0000221B 41                      	inc ecx
   277 0000221C 0F602C87                	punpcklbw mm5, [edi+eax*4]
   278 00002220 A1[48200000]            	mov eax, [gylookoff]
   279 00002225 0F6E1C88                	movd mm3, dword [eax+ecx*4] ;mm3: [ 0   0   0  -gy]
   280 00002229 0FD8EC                  	psubusb mm5, mm4
   281 0000222C 0F70D5FF                	pshufw mm2, mm5, 0ffh
   282 00002230 0FE4EA                  	pmulhuw mm5, mm2
   283 00002233 0F71D507                	psrlw mm5, 7
   284 00002237 0F67ED                  	packuswb mm5, mm5
   285                                  %ifdef USEZBUFFER
   286                                  	punpckldq mm5, mm6         ;Stuff ogx into hi part of color for Z buffer
   287                                  %endif
   288 0000223A 0FEBDE                  	por mm3, mm6               ;mm3: [ gx  0  ogx -gy]
   289                                  loop3: ;if (dmulrethigh(gylookup[ecx*4],c->cx0,c->cy0,ogx) < 0) jmp endloop3
   290 0000223D 0F70F8DD                	pshufw mm7, mm0, 0ddh      ;mm7: [cy0 cx0 cy0 cx0]
   291 00002241 0FF5FB                  	pmaddwd mm7, mm3           ;mm7: [ 0   0  -decide]
   292 00002244 0F7EF8                  	movd eax, mm7
   293 00002247 85C0                    	test eax, eax              ;if (cy0*ogx ? gy*cx0)
   294 00002249 7F1B                    	jg endloop3
   295 0000224B 0FFE05[00000000]        	paddd mm0, qword [_gi]
   296                                  %ifdef USEZBUFFER
   297                                  	movntq [ebx], mm5
   298                                  	add ebx, 8
   299                                  %else
   300 00002252 0F7E2B                  	movd [ebx], mm5
   301 00002255 83C304                  	add ebx, 4
   302                                  %endif
   303 00002258 3B9C2404080000          	cmp ebx, [esp+4+2048]
   304 0000225F 76DC                    	jna loop3
   305 00002261 E9C6040000              	jmp predeletez
   306                                  endloop3:
   307 00002266 0FB64703                	movzx eax, byte [edi+3]
   308 0000226A 39C8                    	cmp eax, ecx
   309 0000226C 75A9                    	jne loop2
   310 0000226E 899C2400080000          	mov [esp+2048], ebx
   311                                  
   312                                  predrawceil:
   313 00002275 89C1                    	mov ecx, eax
   314 00002277 0F70F64E                	pshufw mm6, mm6, 04eh       ;swap hi & lo of mm6
   315                                  drawceil: ;if (dmulrethigh(gylookup[ecx*4],c->cx0,c->cy0,gx) < 0) jmp drawflor
   316 0000227B A1[48200000]            	mov eax, [gylookoff]
   317 00002280 0F6E1C88                	movd mm3, dword [eax+ecx*4] ;mm3: [ 0   0   0  -gy]
   318 00002284 0FEBDE                  	por mm3, mm6               ;mm3: [ogx  0   gx -gy]
   319                                  drawceilloop:
   320 00002287 0F70F8DD                	pshufw mm7, mm0, 0ddh      ;mm7: [cy0 cx0 cy0 cx0]
   321 0000228B 0FF5FB                  	pmaddwd mm7, mm3           ;mm7: [ 0   0  -decide]
   322 0000228E 0F7EF8                  	movd eax, mm7
   323 00002291 85C0                    	test eax, eax              ;if (cy0*gx ? gy*cx0)
   324 00002293 7F46                    	jg drawflor
   325 00002295 0FFE05[00000000]        	paddd mm0, qword [_gi]
   326 0000229C 8B842400080000          	mov eax, [esp+2048]
   327                                  
   328 000022A3 0F606FFC                	punpcklbw mm5, [edi-4]
   329 000022A7 0FD82D[10000000]        	psubusb mm5, qword [_gcsub+16]
   330 000022AE 0F70D5FF                	pshufw mm2, mm5, 0ffh
   331 000022B2 0FE4EA                  	pmulhuw mm5, mm2
   332 000022B5 0F71D507                	psrlw mm5, 7
   333 000022B9 0F67ED                  	packuswb mm5, mm5
   334                                  %ifdef USEZBUFFER
   335                                  	punpckldq mm5, mm6         ;Stuff gx into hi part of color for Z buffer
   336                                  	movntq [eax], mm5
   337                                  	add eax, 8
   338                                  %else
   339 000022BC 0F7E28                  	movd [eax], mm5
   340 000022BF 83C004                  	add eax, 4
   341                                  %endif
   342 000022C2 89842400080000          	mov [esp+2048], eax
   343 000022C9 3B842404080000          	cmp eax, [esp+4+2048]
   344 000022D0 76B5                    	jna drawceilloop
   345 000022D2 E959040000              	jmp deletez
   346                                  
   347                                  predrawflor:
   348 000022D7 0F70F64E                	pshufw mm6, mm6, 04eh       ;swap hi & lo of mm6
   349                                  drawflor: ;if (dmulrethigh(gylookup[edx*4],c->cx1,c->cy1,gx) >= 0) jmp enddrawflor
   350 000022DB A1[48200000]            	mov eax, [gylookoff]
   351 000022E0 0F6E1C90                	movd mm3, dword [eax+edx*4] ;mm3: [ 0   0   0  -gy]
   352 000022E4 0FEBDE                  	por mm3, mm6               ;mm3: [ogx  0   gx -gy]
   353                                  drawflorloop:
   354 000022E7 0F70F9DD                	pshufw mm7, mm1, 0ddh      ;mm7: [cy1 cx1 cy1 cx1]
   355 000022EB 0FF5FB                  	pmaddwd mm7, mm3           ;mm7: [ 0   0  -decide]
   356 000022EE 0F7EF8                  	movd eax, mm7
   357 000022F1 85C0                    	test eax, eax              ;if (cy1*gx ? gy*cx1)
   358 000022F3 7E42                    	jle enddrawflor
   359 000022F5 0FFA0D[00000000]        	psubd mm1, qword [_gi]
   360 000022FC 8B842404080000          	mov eax, [esp+4+2048]
   361                                  
   362 00002303 0F606F04                	punpcklbw mm5, [edi+4]
   363 00002307 0FD82D[18000000]        	psubusb mm5, qword [_gcsub+24]
   364 0000230E 0F70D5FF                	pshufw mm2, mm5, 0ffh
   365 00002312 0FE4EA                  	pmulhuw mm5, mm2
   366 00002315 0F71D507                	psrlw mm5, 7
   367 00002319 0F67ED                  	packuswb mm5, mm5
   368                                  %ifdef USEZBUFFER
   369                                  	punpckldq mm5, mm6         ;Stuff gx into hi part of color for Z buffer
   370                                  	movntq [eax], mm5
   371                                  	sub eax, 8
   372                                  %else
   373 0000231C 0F7E28                  	movd [eax], mm5   ;(Used to page fault here)
   374 0000231F 83E804                  	sub eax, 4
   375                                  %endif
   376 00002322 89842404080000          	mov [esp+4+2048], eax
   377 00002329 3B842400080000          	cmp eax, [esp+2048]
   378 00002330 73B5                    	jnb drawflorloop
   379 00002332 E9F9030000              	jmp deletez
   380                                  
   381                                  enddrawflor:
   382 00002337 89E3                    	mov ebx, esp
   383                                  afterdelete:
   384 00002339 83EC20                  	sub esp, 32
   385 0000233C 81FC[20080000]          	cmp esp, _cfasm+2048 ; _MANUAL FIX_ "offset" in masm means don't bracket
   386 00002342 7356                    	jae skipixy
   387                                  
   388 00002344 0F6F24ED[00000000]      	movq mm4, qword [_gcsub+ebp*8]
   389 0000234C 0334AD[00000000]        	add esi, [_gixy+ebp*4]
   390 00002353 8B2D[04000000]          	mov ebp, [_gpz+4]
   391 00002359 8B3E                    	mov edi, [esi]
   392 0000235B 2B2D[00000000]          	sub ebp, [_gpz+0]
   393 00002361 C1ED1F                  	shr ebp, 31
   394 00002364 8B04AD[00000000]        	mov eax, [_gpz+ebp*4]
   395 0000236B 0F6EF8                  	movd mm7, eax
   396 0000236E 0F62F7                  	punpckldq mm6, mm7
   397 00002371 0FDB35[38200000]        	pand mm6, qword [mmask] ; _MANUAL FIX_ square-bracketed operand 2
   398 00002378 3B05[4C200000]          	cmp eax, [ngxmax]
   399 0000237E 0F879B010000            	ja remiporend
   400 00002384 0304AD[00000000]        	add eax, [_gdz+ebp*4]
   401 0000238B 8904AD[00000000]        	mov DWORD [_gpz+ebp*4], eax
   402 00002392 8B25[50200000]          	mov esp, [ce]
   403 00002398 EB04                    	jmp skipixy2
   404                                  
   405                                  skipixy:
   406 0000239A 0F70F64E                	pshufw mm6, mm6, 04eh       ;swap hi & lo of mm6
   407                                  skipixy2:
   408 0000239E 39E3                    	cmp ebx, esp
   409 000023A0 7429                    	je skipixy3
   410 000023A2 81C300080000            	add ebx, 2048
   411 000023A8 894B08                  	mov [ebx+8], ecx
   412 000023AB 89530C                  	mov [ebx+12], edx
   413 000023AE 0F7F4310                	movq [ebx+16], mm0
   414 000023B2 0F7F4B18                	movq [ebx+24], mm1
   415 000023B6 8D9C2400080000          	lea ebx, [esp+2048]
   416 000023BD 8B4B08                  	mov ecx, [ebx+8]
   417 000023C0 8B530C                  	mov edx, [ebx+12]
   418 000023C3 0F6F4310                	movq mm0, [ebx+16]
   419 000023C7 0F6F4B18                	movq mm1, [ebx+24]
   420                                  skipixy3:
   421                                  
   422                                  		;Find highest intersecting vbuf slab
   423 000023CB 803F00                  	cmp byte [edi], 0
   424 000023CE 0F84BDFDFFFF            	je drawfwall
   425 000023D4 8B1D[48200000]          	mov ebx, [gylookoff]
   426 000023DA EB0C                    	jmp intoslabloop
   427                                  findslabloop:
   428 000023DC 8D3C87                  	lea edi, [edi+eax*4]
   429 000023DF 803F00                  	cmp byte [edi], 0
   430 000023E2 0F84A9FDFFFF            	je drawfwall
   431                                  intoslabloop:
   432 000023E8 0FB64702                	movzx eax, byte [edi+2]
   433                                  		;if (dmulrethigh(gylookup[[edi+2]*4+4],c->cx0,c->cy0,ogx) >= 0)
   434                                  		;   jmp findslabloopbreak
   435 000023EC 0F6E5C8304              	movd mm3, dword [ebx+eax*4+4]    ;mm3: [ 0   0   0  -gy]
   436 000023F1 0FEBDE                  	por mm3, mm6               ;mm3: [ gx  0  ogx -gy]
   437 000023F4 0F70F8DD                	pshufw mm7, mm0, 0ddh      ;mm7: [cy0 cx0 cy0 cx0]
   438 000023F8 0FF5FB                  	pmaddwd mm7, mm3           ;mm7: [ 0   0  -decide]
   439 000023FB 0F7EF8                  	movd eax, mm7
   440 000023FE 85C0                    	test eax, eax              ;if (cy0*ogx ? ?y*cx0)
   441                                  
   442 00002400 0FB607                  	movzx eax, byte [edi]
   443 00002403 7FD7                    	jg findslabloop
   444                                  
   445                                  		;If next slab ALSO intersects, split _cfasm!
   446                                  		;if (dmulrethigh(v[v[0]*4+3],c->cx1,c->cy1,ogx) >= 0) jmp drawfwall
   447 00002405 0FB6448703              	movzx eax, byte [3+edi+eax*4]
   448 0000240A 0F6E1C83                	movd mm3, dword [ebx+eax*4]      ;mm3: [ 0   0   0  -gy]
   449 0000240E 0FEBDE                  	por mm3, mm6               ;mm3: [ gx  0  ogx -gy]
   450 00002411 0F70F9DD                	pshufw mm7, mm1, 0ddh      ;mm7: [cy1 cx1 cy1 cx1]
   451 00002415 0FF5FB                  	pmaddwd mm7, mm3           ;mm7: [ 0   0  -decide]
   452 00002418 0F7EF8                  	movd eax, mm7
   453 0000241B 85C0                    	test eax, eax              ;if (cy1*ogx ? ?y*cx1)
   454 0000241D 0F8E6EFDFFFF            	jle drawfwall
   455                                  
   456                                  
   457                                  		;Make sure everything is in memory at this point
   458 00002423 8D842400080000          	lea eax, [esp+2048]
   459 0000242A 894808                  	mov [eax+8], ecx
   460 0000242D 89500C                  	mov [eax+12], edx
   461 00002430 0F7F4010                	movq [eax+16], mm0
   462 00002434 0F7F4818                	movq [eax+24], mm1
   463                                  
   464                                  		;(ecx and edx are free registers at this point)
   465                                  
   466 00002438 8B5004                  	mov edx, [eax+4]             ;col = (long)c->i1;
   467 0000243B 0FB64702                	movzx eax, byte [edi+2]  ;dax = c->cx1; day = c->cy1;
   468 0000243F 0F6E5C8304              	movd mm3, dword [ebx+eax*4+4]      ;mm3: [ 0   0   0  -gy]
   469 00002444 0FEBDE                  	por mm3, mm6                 ;mm3: [ gx  0  ogx -gy]
   470                                  
   471                                  		;WARNING: NEW CODE!!!!!!!
   472                                  prebegsearchi16:
   473 00002447 0F6F3D[00000000]        	movq mm7, qword [_gi]
   474 0000244E 0F72F704                	pslld mm7, 4
   475 00002452 0F6FE9                  	movq mm5, mm1
   476 00002455 0FFAEF                  	psubd mm5, mm7             ;mm7: [day.... dax....]
   477 00002458 0F70FDDD                	pshufw mm7, mm5, 0ddh      ;mm7: [day dax day dax]
   478 0000245C 0FF5FB                  	pmaddwd mm7, mm3           ;mm7: [ 0   0  -decide]
   479 0000245F 0F7EF8                  	movd eax, mm7
   480 00002462 85C0                    	test eax, eax              ;if (day*ogx ? gy*dax)
   481 00002464 7E14                    	jle begsearchi
   482 00002466 0F6FCD                  	movq mm1, mm5
   483                                  %ifdef USEZBUFFER
   484                                  	sub edx, 16 << 3
   485                                  %else
   486 00002469 83EA40                  	sub edx, 16 << 2
   487                                  %endif
   488 0000246C EBD9                    	jmp prebegsearchi16
   489                                  
   490 0000246E EB0A                    	jmp begsearchi
   491                                  		;while (dmulrethigh(gylookup[v[2]+1],dax,day,ogx) < 0)
   492                                  prebegsearchi:
   493                                  %ifdef USEZBUFFER
   494                                  	sub edx, 4 << 1             ;col -= 8;
   495                                  %else
   496 00002470 83EA04                  	sub edx, 4                   ;col -= 4;
   497                                  %endif
   498 00002473 0FFA0D[00000000]        	psubd mm1, qword [_gi]     ;dax -= gi[0]; day -= gi[1];
   499                                  begsearchi:
   500 0000247A 0F70F9DD                	pshufw mm7, mm1, 0ddh      ;mm7: [day dax day dax]
   501 0000247E 0FF5FB                  	pmaddwd mm7, mm3           ;mm7: [ 0   0  -decide]
   502 00002481 0F7EF8                  	movd eax, mm7
   503 00002484 85C0                    	test eax, eax              ;if (day*ogx ? gy*dax)
   504 00002486 7FE8                    	jg prebegsearchi
   505                                  
   506 00002488 A1[50200000]            	mov eax, [ce]            ;ce++;
   507 0000248D 83C020                  	add eax, 32
   508                                  
   509 00002490 3D[20100000]            	cmp eax, _cfasm+4096 ;VERY BAD!!! - Interrupt would overwrite data! ; _MANUAL FIX_ "offset" in masm means don't bracket
   510 00002495 0F8784020000            	ja retsub                    ;Just in case, return early to prevent lockup.
   511                                  
   512 0000249B A3[50200000]            	mov dword [ce], eax
   513 000024A0 39E0                    	cmp eax, esp           ;for(c2=ce;c2>c;c2--)   //(c2 = eax)
   514 000024A2 763F                    	jbe skipinsertloop
   515                                  beginsertloop:
   516 000024A4 0F6FA8F8070000          	movq mm5, [eax-32+24+2048]  ;c2[0] = c2[-1];
   517 000024AB 0F6FB8F0070000          	movq mm7, [eax-32+16+2048]
   518 000024B2 0F7FA818080000          	movq [eax+24+2048], mm5
   519 000024B9 0F7FB810080000          	movq [eax+16+2048], mm7
   520 000024C0 0F6FA8E8070000          	movq mm5, [eax-32+8+2048]
   521 000024C7 0F6FB8E0070000          	movq mm7, [eax-32+0+2048]
   522 000024CE 0F7FA808080000          	movq [eax+8+2048], mm5
   523 000024D5 0F7FB800080000          	movq [eax+0+2048], mm7
   524 000024DC 83E820                  	sub eax, 32
   525 000024DF 39E0                    	cmp eax, esp
   526 000024E1 77C1                    	ja beginsertloop
   527                                  skipinsertloop:
   528                                  
   529 000024E3 0FB607                  	movzx eax, byte [edi]
   530 000024E6 0F6FF9                  	movq mm7, mm1              ;c[1].cx1 = dax; c[1].cy1 = day;
   531 000024E9 0FFE3D[00000000]        	paddd mm7, qword [_gi]
   532 000024F0 0FB6448703              	movzx eax, byte [3+edi+eax*4]
   533 000024F5 89942424080000          	mov [esp+32+4+2048], edx        ;c[1].i1 = (long *)col;
   534                                  %ifdef USEZBUFFER
   535                                  	add edx, 8                      ;c[0].i0 = (long *)(col+(4<<1));
   536                                  %else
   537 000024FC 83C204                  	add edx, 4                      ;c[0].i0 = (long *)(col+4);
   538                                  %endif
   539 000024FF 89942400080000          	mov [esp+2048], edx
   540 00002506 89C2                    	mov edx, eax               ;c[1].z1 = c[0].z0 = v[(v[0]<<2)+3];
   541 00002508 89842408080000          	mov [esp+8+2048], eax
   542 0000250F 0F7FBC2410080000        	movq [esp+16+2048], mm7         ;c[0].cx0 = dax+gi[0]; c[0].cy0 = day+gi[1];
   543 00002517 83C420                  	add esp, 32                ;c++;
   544 0000251A E972FCFFFF              	jmp drawfwall
   545                                  
   546                                  remiporend:
   547 0000251F A0[E8200000]            	mov al, [gmipcnt]
   548 00002524 FEC0                    	inc al
   549 00002526 3A05[00000000]          	cmp al, byte [_gmipnum]
   550 0000252C 0F8D31010000            	jge startsky
   551 00002532 A2[E8200000]            	mov [gmipcnt], al
   552                                  
   553 00002537 81EE[00000000]          	sub esi, _sptr
   554                                  
   555 0000253D 89F0                    	mov eax, esi
   556 0000253F C1E01D                  	shl eax, 29
   557 00002542 3305[00000000]          	xor eax, [_gixy+0]
   558 00002548 A1[00000000]            	mov eax, [_gdz+0]
   559 0000254D 7806                    	js short skipbladd0
   560 0000254F 0105[00000000]          	add DWORD [_gpz+0], eax
   561                                  skipbladd0:
   562 00002555 01C0                    	add eax, eax
   563 00002557 710C                    	jno short skipremip0
   564 00002559 C705[00000000]FFFF-     	mov DWORD [_gpz+0], 7fffffffh
   565 00002561 FF7F               
   566 00002563 31C0                    	xor eax, eax
   567                                  skipremip0:
   568 00002565 A3[00000000]            	mov DWORD [_gdz+0], eax
   569                                  
   570 0000256A 898B08080000            	mov [ebx+8+2048], ecx ;this is the official place to backup ecx
   571                                  
   572 00002570 89F0                    	mov eax, esi
   573 00002572 8A0D[E8200000]          	mov cl, byte [gmipcnt]
   574 00002578 80C112                  	add cl, 31-1-2-LVSID
   575 0000257B D3E0                    	shl eax, cl
   576 0000257D 3305[04000000]          	xor eax, [_gixy+4]
   577 00002583 A1[04000000]            	mov eax, [_gdz+4]
   578 00002588 7806                    	js short skipbladd1
   579 0000258A 0105[04000000]          	add DWORD [_gpz+4], eax
   580                                  skipbladd1:
   581 00002590 01C0                    	add eax, eax
   582 00002592 710C                    	jno short skipremip1
   583 00002594 C705[04000000]FFFF-     	mov DWORD [_gpz+4], 7fffffffh
   584 0000259C FF7F               
   585 0000259E 31C0                    	xor eax, eax
   586                                  skipremip1:
   587 000025A0 A3[04000000]            	mov DWORD [_gdz+4], eax
   588                                  
   589 000025A5 C1EE02                  	shr esi, 2
   590 000025A8 89F0                    	mov eax, esi
   591 000025AA 0FB60D[E8200000]        	movzx ecx, byte [gmipcnt]
   592 000025B1 23348D[7C200000]        	and esi, [gxmipk+ecx*4] ;mask for x (1:1024->512, etc...)
   593 000025B8 23048D[A0200000]        	and eax, [gymipk+ecx*4] ;mask for y (1:1024->512, etc...)
   594 000025BF 8D3470                  	lea esi, [eax+esi*2]
   595 000025C2 03348D[C4200000]        	add esi, [gamipk+ecx*4] ;add offset (1:sptr+1024*1024*4, etc...)
   596                                  
   597 000025C9 0FB605[E8200000]        	movzx eax, byte [gmipcnt]
   598 000025D0 8B0485[58200000]        	mov eax, [gylut+eax*4]
   599 000025D7 A3[48200000]            	mov [gylookoff], eax
   600                                  
   601 000025DC D13D[04000000]          	sar DWORD [_gixy+4], 1
   602                                  
   603 000025E2 B8[20080000]            	mov eax, _cfasm+2048 ; _MANUAL FIX_ "offset" in masm means don't bracket
   604                                  startremip0:
   605 000025E7 D1A808080000            	shr dword [eax+8+2048], 1
   606 000025ED FF800C080000            	inc dword [eax+12+2048]
   607 000025F3 D1A80C080000            	shr dword [eax+12+2048], 1
   608 000025F9 83C020                  	add eax, 32
   609 000025FC 3B05[50200000]          	cmp eax, [ce]
   610 00002602 76E3                    	jbe short startremip0
   611                                  
   612 00002604 A1[4C200000]            	mov eax, [ngxmax]
   613 00002609 3B05[00000000]          	cmp eax, [_gxmax]
   614 0000260F 7352                    	jae short startsky
   615 00002611 01C0                    	add eax, eax
   616 00002613 7008                    	jo skipngxmax1 ;Make sure it doesn't overflow to negative!
   617 00002615 3B05[00000000]          	cmp eax, [_gxmax]
   618 0000261B 7C05                    	jl short skipngxmax2
   619                                  skipngxmax1:
   620 0000261D A1[00000000]            	mov eax, [_gxmax]
   621                                  skipngxmax2:
   622 00002622 A3[4C200000]            	mov [ngxmax], eax
   623                                  
   624                                  		;register fix-ups after here:
   625 00002627 8B8B08080000            	mov ecx, [ebx+8+2048] ;this is the official place to restore ecx
   626 0000262D D1E9                    	shr ecx, 1
   627 0000262F 42                      	inc edx
   628 00002630 D1EA                    	shr edx, 1
   629                                  
   630                                  		;this makes grid transition clean
   631 00002632 8B2D[04000000]          	mov ebp, [_gpz+4]
   632 00002638 2B2D[00000000]          	sub ebp, [_gpz+0]
   633 0000263E C1ED1F                  	shr ebp, 31
   634 00002641 8B04AD[00000000]        	mov eax, [_gpz+ebp*4]
   635 00002648 0304AD[00000000]        	add eax, [_gdz+ebp*4]
   636 0000264F 8904AD[00000000]        	mov DWORD [_gpz+ebp*4], eax
   637 00002656 8B3E                    	mov edi, [esi]
   638                                  
   639 00002658 8B25[50200000]          	mov esp, [ce]
   640 0000265E E93BFDFFFF              	jmp skipixy2
   641                                  
   642                                  startsky:
   643 00002663 8B25[20080000]          	mov esp, [_cfasm+2048]
   644 00002669 3B25[50200000]          	cmp esp, [ce]
   645 0000266F 0F87AA000000            	ja retsub
   646 00002675 8B35[00000000]          	mov esi, [_skyoff]
   647 0000267B 85F6                    	test esi, esi
   648 0000267D 7530                    	jnz short prestartskyloop
   649                                  
   650                                  ;Sky not loaded, so fill with black ------------------------------------------
   651                                  endprebegloop:
   652 0000267F 0F6F2D[40200000]        	movq mm5, [_skycast] ; _MANUAL FIX_ square-bracketed operand 2
   653 00002686 8B842400080000          	mov eax, [esp+2048]
   654 0000268D 8B9C2404080000          	mov ebx, [esp+4+2048]
   655 00002694 39D8                    	cmp eax, ebx
   656 00002696 770A                    	ja short endnextloop
   657                                  endbegloop:
   658                                  %ifdef USEZBUFFER
   659                                  	movntq [eax], mm5
   660                                  	add eax, 8
   661                                  %else
   662 00002698 0F7E28                  	movd [eax], mm5
   663 0000269B 83C004                  	add eax, 4
   664                                  %endif
   665 0000269E 39D8                    	cmp eax, ebx
   666 000026A0 76F6                    	jbe short endbegloop
   667                                  endnextloop:
   668 000026A2 83C420                  	add esp, 32
   669 000026A5 3B25[50200000]          	cmp esp, [ce]
   670 000026AB 76D2                    	jbe short endprebegloop
   671 000026AD EB70                    	jmp short retsub
   672                                  
   673                                  ;Sky loaded: do texture mapping ----------------------------------------------
   674                                  
   675                                  prestartskyloop:
   676 000026AF 0F7F8B18080000          	movq qword [ebx+24+2048], mm1 ;Hack to make sure [cy0,cx0] is in memory for sky  ; _MANUAL FIX_ square-bracket now in correct spot. OLD: movq [qword ebx+24+2048],
   677                                  
   678 000026B6 8B35[00000000]          	mov esi, [_skyoff]
   679 000026BC 8B0D[00000000]          	mov ecx, [_skylat]
   680 000026C2 0F6E2D[44200000]        	movd mm5, dword [_skycast+4]
   681 000026C9 8B3D[00000000]          	mov edi, [_skyxsiz]
   682                                  startskyloop:
   683 000026CF 8B842400080000          	mov eax, [esp+2048]
   684 000026D6 8B9C2404080000          	mov ebx, [esp+4+2048]
   685 000026DD 39D8                    	cmp eax, ebx
   686 000026DF 7733                    	ja short endskyslab
   687 000026E1 0F6F8C2418080000        	movq mm1, [esp+24+2048]    ;mm1: [cy1.... cx1....]
   688                                  preskysearch:
   689 000026E9 0FFA0D[00000000]        	psubd mm1, qword [_gi]
   690                                  skysearch:
   691 000026F0 0F70F9DD                	pshufw mm7, mm1, 0ddh      ;mm7: [cy1 cx1 cy1 cx1]
   692 000026F4 0F6E1CB9                	movd mm3, dword [ecx+edi*4]      ;mm3: [       xvi -yvi]
   693 000026F8 0FF5FB                  	pmaddwd mm7, mm3           ;mm7: [ 0   0  -decide]
   694 000026FB 0F7EFA                  	movd edx, mm7
   695 000026FE C1FA1F                  	sar edx, 31
   696 00002701 8D3C17                  	lea edi, [edi+edx]
   697 00002704 75EA                    	jnz short skysearch        ;if (cy1*xvi ? -yvi*cx1)
   698                                  
   699 00002706 0F6E34BE                	movd mm6, dword [esi+edi*4]
   700                                  %ifdef USEZBUFFER
   701                                  	punpckldq mm6, mm5
   702                                  	movntq [ebx], mm6
   703                                  	sub ebx, 8
   704                                  %else
   705 0000270A 0F7E33                  	movd [ebx], mm6
   706 0000270D 83EB04                  	sub ebx, 4
   707                                  %endif
   708 00002710 39D8                    	cmp eax, ebx
   709 00002712 76D5                    	jbe short preskysearch
   710                                  endskyslab:
   711 00002714 83C420                  	add esp, 32
   712 00002717 3B25[50200000]          	cmp esp, [ce]
   713 0000271D 76B0                    	jbe short startskyloop
   714                                  
   715                                  ;-----------------------------------------------------------------------
   716                                  
   717                                  retsub:
   718 0000271F 0F77                    	emms
   719 00002721 8B25[54200000]          	mov esp, dword [espbak]
   720 00002727 5D                      	pop ebp    ;Visual C's _cdecl requires EBX,ESI,EDI,EBP to be preserved
   721 00002728 5F                      	pop edi
   722 00002729 5E                      	pop esi
   723 0000272A 5B                      	pop ebx
   724 0000272B C3                      	retn
   725                                  
   726                                  predeletez:
   727 0000272C 0F70F64E                	pshufw mm6, mm6, 04eh       ;swap hi & lo of mm6
   728                                  deletez:
   729 00002730 8B1D[50200000]          	mov ebx, [ce]
   730 00002736 83EB20                  	sub ebx, 32
   731 00002739 3B1D[20080000]          	cmp ebx, [_cfasm+2048]
   732 0000273F 72DE                    	jb retsub          ;nothing to fill - skip remiporend stuff!
   733 00002741 891D[50200000]          	mov dword [ce], ebx
   734                                  
   735 00002747 83C320                  	add ebx, 32
   736                                  
   737 0000274A 39DC                    	cmp esp, ebx       ;while (eax <= ce)
   738 0000274C 0F83E7FBFFFF            	jae afterdelete
   739 00002752 89E0                    	mov eax, esp
   740                                  deleteloop:
   741 00002754 0F6FA820080000          	movq mm5, [eax+32+0+2048]
   742 0000275B 0F6FB828080000          	movq mm7, [eax+32+8+2048]
   743 00002762 0F7FA800080000          	movq [eax+0+2048], mm5
   744 00002769 0F7FB808080000          	movq [eax+8+2048], mm7
   745 00002770 0F6FA830080000          	movq mm5, [eax+32+16+2048]
   746 00002777 0F6FB838080000          	movq mm7, [eax+32+24+2048]
   747 0000277E 0F7FA810080000          	movq [eax+16+2048], mm5
   748 00002785 0F7FB818080000          	movq [eax+24+2048], mm7
   749 0000278C 83C020                  	add eax, 32
   750 0000278F 39D8                    	cmp eax, ebx
   751 00002791 72C1                    	jb deleteloop
   752 00002793 E9A1FBFFFF              	jmp afterdelete
   753                                  
   754                                  ;debugret:
   755                                  ;   mov _reax, eax
   756                                  ;   mov _rebx, ebx
   757                                  ;   mov _recx, ecx
   758                                  ;   mov _redx, edx
   759                                  ;   mov _resi, esi
   760                                  ;   mov _redi, edi
   761                                  ;   mov _rebp, ebp
   762                                  ;   mov _resp, esp
   763                                  ;   movq _remm[0], mm0
   764                                  ;   movq _remm[8], mm1
   765                                  ;   movq _remm[16], mm2
   766                                  ;   movq _remm[24], mm3
   767                                  ;   movq _remm[32], mm4
   768                                  ;   movq _remm[40], mm5
   769                                  ;   movq _remm[48], mm6
   770                                  ;   movq _remm[56], mm7
   771                                  ;   emms
   772                                  ;   pop ebp
   773                                  ;   ret
   774                                  
   775                                  ;----------------------------------------------------------------------------
   776                                  
   777                                  MAXZSIZ EQU 1024 ;WARNING: THIS IS BAD SINCE KV6 format supports up to 65535!
   778                                  
   779                                  %ifdef USEZBUFFER
   780                                  EXTERN _zbufoff
   781                                  %endif
   782                                  EXTERN _ptfaces16
   783                                  
   784                                  GLOBAL	_opti4asm, _caddasm, _ztabasm, _scisdist, _kv6colmul, _kv6coladd
   785                                  GLOBAL	_qsum0, _qsum1, _qbplbpp, _kv6frameplace, _kv6bytesperline
   786                                  
   787 00002798 90<rept>                ALIGN 16
   788 000027A0 00000000<rept>          _opti4asm times	5*4	dd 0        ;NOTE: this used by ?render
   789 000027F0 00000000<rept>          _caddasm times	8*4	dd 0
   790 00002870 00000000<rept>          _ztabasm times	(MAXZSIZ+3)*4	dd 0
   791 000068A0 000080400000000000-     _scisdist dd 40800000h,0,0,0
   792 000068A9 00000000000000     
   793 000068B0 0000000000000000-       _kv6colmul times 256 dq 0 ; _MANUAL FIX_ proper "times" syntax. OLD: _kv6colmul dq 256 dup(0)
   794 000068B0 <rept>             
   795 000070B0 0000000000000000        _kv6coladd dq 0
   796 000070B8 0000000000000000        _qsum0 dq 0   ;[8000h-hy,8000h-hx,8000h-hy,8000h-hx]
   797 000070C0 0000000000000000        _qsum1 dq 0   ;[8000h-fy,8000h-fx,8000h-fy,8000h-fx]
   798 000070C8 0000000000000000        _qbplbpp dq 0 ;[0,0,bpl,bpp]
   799 000070D0 00000000                _kv6frameplace dd 0
   800 000070D4 00000000                _kv6bytesperline dd 0
   801                                  
   802                                  GLOBAL	_drawboundcubesseinit   ;Visual C entry point (pass by stack)
   803                                  _drawboundcubesseinit:
   804 000070D8 A1[D0700000]            	mov eax, [_kv6frameplace]
   805 000070DD A3[45720000]            	mov dword [bcmod0-4], eax
   806 000070E2 A1[D4700000]            	mov eax, [_kv6bytesperline]
   807 000070E7 A3[56720000]            	mov dword [bcmod3-4], eax
   808                                  %ifdef USEZBUFFER
   809                                  	;mov eax, _kv6bytesperline
   810                                  	mov dword [bcmod2-4], eax
   811                                  	mov eax, [_zbufoff]
   812                                  	mov dword [bcmod1-4], eax
   813                                  %endif
   814 000070EC C3                      	retn       ;Visual C's _cdecl requires EBX,ESI,EDI,EBP to be preserved
   815                                  
   816 000070ED 90<rept>                ALIGN 16
   817                                  GLOBAL	_drawboundcubesse       ;Visual C entry point (pass by stack)
   818                                  _drawboundcubesse:
   819 000070F0 8B442404                	mov eax, [esp+4]
   820 000070F4 8B4C2408                	mov ecx, [esp+8]
   821 000070F8 53                      	push ebx   ;Visual C's _cdecl requires EBX,ESI,EDI,EBP to be preserved
   822 000070F9 57                      	push edi
   823                                  
   824 000070FA 0FB67806                	movzx edi, byte [eax+6]
   825 000070FE 21F9                    	and ecx, edi
   826 00007100 0F845C010000            	jz retboundcube
   827                                  
   828 00007106 0F283D[70680000]        	movaps xmm7, [_ztabasm+MAXZSIZ*16] ; _MANUAL FIX_ Remove DWORD prefix from operand 2
   829 0000710D 0FB77804                	movzx edi, word [eax+4]
   830 00007111 C1E704                  	shl edi, 4
   831 00007114 0F58BF[70280000]        	addps xmm7, [_ztabasm+edi] ; _MANUAL FIX_ Remove DWORD prefix from operand 2
   832 0000711B 0F12C7                  	movhlps xmm0, xmm7
   833 0000711E 0F2E05[A0680000]        	ucomiss xmm0, [_scisdist] ; _MANUAL FIX_ Remove DWORD prefix from operand 2
   834 00007125 0F8237010000            	jc retboundcube
   835                                  
   836 0000712B 8D0CCD[00000000]        	lea ecx, [_ptfaces16+ecx*8]
   837                                  
   838 00007132 0FB65901                	movzx ebx, byte [ecx+1] ;                           Ý
   839 00007136 0FB67902                	movzx edi, byte [ecx+2] ;                           Ý
   840 0000713A 0F2883[F0270000]        	movaps xmm0, [_caddasm+ebx] ;xmm0: [ z0, z0, y0, x0]    Û ; _MANUAL FIX_ Remove DWORD prefix from operand 2
   841 00007141 0F58C7                  	addps xmm0, xmm7            ;                           ÛÛ±
   842 00007144 0F288F[F0270000]        	movaps xmm1, [_caddasm+edi] ;xmm1: [ z1, z1, y1, x1]    Û ; _MANUAL FIX_ Remove DWORD prefix from operand 2
   843 0000714B 0F58CF                  	addps xmm1, xmm7            ;                           ÛÛ±
   844 0000714E 0F28F0                  	movaps xmm6, xmm0           ;xmm6: [ z0, z0, y0, x0]    Û
   845 00007151 0F12C1                  	movhlps xmm0, xmm1          ;xmm0: [ z0, z0, z1, z1]    Û
   846 00007154 0F16CE                  	movlhps xmm1, xmm6          ;xmm1: [ y0, x0, y1, x1]    Û
   847 00007157 0F53C0                  	rcpps xmm0, xmm0            ;xmm6: [/z0,/z0,/z1,/z1]    ÛÛ
   848 0000715A 0F59C1                  	mulps xmm0, xmm1            ;xmm0: [sy0,sx0,sy1,sx1]    ÛÛ±±
   849                                  
   850 0000715D 0FB65903                	movzx ebx, byte [ecx+3] ;                           Ý
   851 00007161 0FB67904                	movzx edi, byte [ecx+4] ;                           Ý
   852 00007165 0F2893[F0270000]        	movaps xmm2, [_caddasm+ebx] ;xmm2: [ z2, z2, y2, x2]    Û ; _MANUAL FIX_ Remove DWORD prefix from operand 2
   853 0000716C 0F58D7                  	addps xmm2, xmm7            ;                           ÛÛ±
   854 0000716F 0F289F[F0270000]        	movaps xmm3, [_caddasm+edi] ;xmm3: [ z3, z3, y3, x3]    Û ; _MANUAL FIX_ Remove DWORD prefix from operand 2
   855 00007176 0F58DF                  	addps xmm3, xmm7            ;                           ÛÛ±
   856 00007179 0F28F2                  	movaps xmm6, xmm2           ;xmm6: [ z2, z2, y2, x2]    Û
   857 0000717C 0F12D3                  	movhlps xmm2, xmm3          ;xmm2: [ z2, z2, z3, z3]    Û
   858 0000717F 0F16DE                  	movlhps xmm3, xmm6          ;xmm3: [ y2, x2, y3, x3]    Û
   859 00007182 0F53D2                  	rcpps xmm2, xmm2            ;xmm6: [/z2,/z2,/z3,/z3]    ÛÛ
   860 00007185 0F59D3                  	mulps xmm2, xmm3            ;xmm2: [sy2,sx2,sy3,sx3]    ÛÛ±±
   861                                  
   862 00007188 0F2CC0                  	cvttps2pi mm0, xmm0         ;                           Û
   863 0000718B 0F12C0                  	movhlps xmm0, xmm0          ;                           Û
   864 0000718E 0F2CD2                  	cvttps2pi mm2, xmm2         ;                           Û
   865 00007191 0F2CC8                  	cvttps2pi mm1, xmm0         ;                           Û
   866 00007194 0F12D2                  	movhlps xmm2, xmm2          ;                           Û
   867 00007197 0F6BC1                  	packssdw mm0, mm1           ;                           Ý
   868 0000719A 0F6FC8                  	movq mm1, mm0               ;                           Ý
   869 0000719D 0F2CDA                  	cvttps2pi mm3, xmm2         ;                           Û
   870 000071A0 0F6BD3                  	packssdw mm2, mm3           ;                           Ý
   871 000071A3 0FEAC2                  	pminsw mm0, mm2             ;                           Ý
   872 000071A6 0FEECA                  	pmaxsw mm1, mm2             ;                           Ý
   873                                  
   874 000071A9 803904                  	cmp byte [ecx], 4
   875 000071AC 743D                    	je short bcskip6case
   876                                  
   877 000071AE 0FB65905                	movzx ebx, byte [ecx+5] ;                           Ý
   878 000071B2 0FB67906                	movzx edi, byte [ecx+6] ;                           Ý
   879 000071B6 0F28A3[F0270000]        	movaps xmm4, [_caddasm+ebx] ;xmm4: [ z4, z4, y4, x4]    Û ; _MANUAL FIX_ Remove DWORD prefix from operand 2
   880 000071BD 0F58E7                  	addps xmm4, xmm7            ;                           ÛÛ±
   881 000071C0 0F28AF[F0270000]        	movaps xmm5, [_caddasm+edi] ;xmm5: [ z5, z5, y5, x5]    Û ; _MANUAL FIX_ Remove DWORD prefix from operand 2
   882 000071C7 0F58EF                  	addps xmm5, xmm7            ;                           ÛÛ±
   883 000071CA 0F28F4                  	movaps xmm6, xmm4           ;xmm6: [ z4, z4, y4, x4]    Û
   884 000071CD 0F12E5                  	movhlps xmm4, xmm5          ;xmm4: [ z4, z4, z5, z5]    Û
   885 000071D0 0F16EE                  	movlhps xmm5, xmm6          ;xmm5: [ y4, x4, y5, x5]    Û
   886 000071D3 0F53E4                  	rcpps xmm4, xmm4            ;xmm6: [/z4,/z4,/z5,/z5]    ÛÛ
   887 000071D6 0F59E5                  	mulps xmm4, xmm5            ;xmm4: [sy4,sx4,sy5,sx5]    ÛÛ±±
   888                                  
   889 000071D9 0F2CE4                  	cvttps2pi mm4, xmm4         ;                           Û
   890 000071DC 0F12E4                  	movhlps xmm4, xmm4          ;                           Û
   891 000071DF 0F2CEC                  	cvttps2pi mm5, xmm4         ;                           Û
   892 000071E2 0F6BE5                  	packssdw mm4, mm5           ;                           Ý
   893 000071E5 0FEAC4                  	pminsw mm0, mm4             ; mm0: [my1,mx1,my0,mx0]    Ý
   894 000071E8 0FEECC                  	pmaxsw mm1, mm4             ; mm1: [My1,Mx1,My0,Mx0]    Ý
   895                                  bcskip6case:
   896                                  
   897 000071EB 0F70D00E                	pshufw mm2, mm0, 0eh        ; mm2: [   ,   ,my1,mx1]    Û
   898 000071EF 0F70D90E                	pshufw mm3, mm1, 0eh        ; mm3: [   ,   ,My1,Mx1]    Û
   899 000071F3 0FEAC2                  	pminsw mm0, mm2             ; mm0: [  ?,  ?, my, mx]    Ý
   900 000071F6 0FEECB                  	pmaxsw mm1, mm3             ; mm1: [  ?,  ?, My, Mx]    Ý
   901 000071F9 0F62C1                  	punpckldq mm0, mm1          ; mm0: [ My, Mx, my, mx]    Ý
   902                                  
   903                                  		;See SCRCLP2D.BAS for a derivation of these 4 lines:
   904 000071FC 0FEDC6                  	paddsw mm0, mm6 ;_qsum0     ; mm0: ["+?,"+?,"+?,"+?]    Û
   905 000071FF 0FEEC7                  	pmaxsw mm0, mm7 ;_qsum1     ; mm0: [sy1,sx1,sy0,sx0]    Û
   906 00007202 0F70C8EE                	pshufw mm1, mm0, 0eeh       ; mm1: [sy1,sx1,sy1,sx1]    Û
   907 00007206 0FD9C8                  	psubusw mm1, mm0            ; mm1: [  0,  0, dy, dx]    Ý
   908                                  		;kv6frameplace -= ((32767-yres)*bpl + (32767-xres)*4);
   909                                  
   910 00007209 0F7ECA                  	movd edx, mm1               ; edx: [ dy, dx]            Û
   911 0000720C 0FF505[C8700000]        	pmaddwd mm0, [_qbplbpp]     ; mm0: [      ?,   offs]    Û±± (=y*bpl+x*bpp) ; _MANUAL FIX_ OLD: pmaddwd mm0, _qbplbpp
   912 00007213 0F7ECB                  	movd ebx, mm1               ; ebx: [ dy, dx]            Ý
   913 00007216 81E2FFFF0000            	and edx, 0ffffh             ; ebx: [  0, dx]            Ý
   914 0000721C 7444                    	jz short retboundcube       ;                           Ý
   915 0000721E 81EB00000100            	sub ebx, 65536              ;                           Ý
   916 00007224 723C                    	jc short retboundcube       ;                           Ý
   917                                  
   918 00007226 0FB67807                	movzx edi, byte [eax+7]
   919 0000722A 0F6028                  	punpcklbw mm5, [eax]
   920 0000722D 0FE42CFD[B0680000]      	pmulhuw mm5, [_kv6colmul+edi*8]
   921 00007235 0FFD2D[B0700000]        	paddw mm5, [_kv6coladd] ; _MANUAL FIX_ OLD: paddw mm5, _kv6coladd 
   922 0000723C 0F67ED                  	packuswb mm5, mm5
   923 0000723F 0F7EC7                  	movd edi, mm0               ; edi: offs
   924                                  
   925 00007242 8DBC9788888888          	lea edi, [edi+edx*4+88888888h] ;_kv6frameplace
   926                                  bcmod0:
   927 00007249 F7DA                    	neg edx
   928                                  %ifdef USEZBUFFER
   929                                  	movhlps xmm0, xmm7
   930                                  	lea eax, [edi+88888888h] ;_zbufoff
   931                                  bcmod1:
   932                                  %endif
   933                                  boundcubenextline:
   934 0000724B 89D1                    	mov ecx, edx
   935                                  begstosb:
   936                                  %ifdef USEZBUFFER
   937                                  	ucomiss xmm0, dword [eax+ecx*4]
   938                                  	jnc short skipdrawpix
   939                                  	movss dword [eax+ecx*4], xmm0
   940                                  %endif
   941 0000724D 0F7E2C8F                	movd dword [edi+ecx*4], mm5
   942                                  skipdrawpix:
   943 00007251 41                      	inc ecx
   944 00007252 75F9                    	jnz begstosb
   945                                  %ifdef USEZBUFFER
   946                                  	add eax, 88888888h; _kv6bytesperline
   947                                  bcmod2:
   948                                  %endif
   949 00007254 81C788888888            	add edi, 88888888h ;_kv6bytesperline
   950                                  bcmod3:
   951                                  
   952 0000725A 81EB00000100            	sub ebx, 65536
   953 00007260 73E9                    	jnc short boundcubenextline
   954                                  
   955                                  retboundcube:
   956 00007262 5F                      	pop edi    ;Visual C's _cdecl requires EBX,ESI,EDI,EBP to be preserved
   957 00007263 5B                      	pop ebx
   958 00007264 C3                      	retn
   959                                  
   960                                  GLOBAL	_drawboundcube3dninit   ;Visual C entry point (pass by stack)
   961                                  _drawboundcube3dninit:
   962 00007265 A1[D0700000]            	mov eax, [_kv6frameplace]
   963 0000726A A3[37740000]            	mov dword [bcmod0_3dn-4], eax
   964 0000726F A1[D4700000]            	mov eax, [_kv6bytesperline]
   965 00007274 A3[4C740000]            	mov dword [bcmod3_3dn-4], eax
   966                                  %ifdef USEZBUFFER
   967                                  	;mov eax, _kv6bytesperline
   968                                  	mov dword [bcmod2_3dn-4], eax
   969                                  	mov eax, [_zbufoff]
   970                                  	mov dword [bcmod1_3dn-4], eax
   971                                  %endif
   972 00007279 C3                      	retn       ;Visual C's _cdecl requires EBX,ESI,EDI,EBP to be preserved
   973                                  
   974 0000727A 90<rept>                ALIGN 16
   975                                  GLOBAL	_drawboundcube3dn       ;Visual C entry point (pass by stack)
   976                                  _drawboundcube3dn:
   977 00007280 8B442404                	mov eax, [esp+4]
   978 00007284 8B4C2408                	mov ecx, [esp+8]
   979 00007288 53                      	push ebx   ;Visual C's _cdecl requires EBX,ESI,EDI,EBP to be preserved
   980 00007289 57                      	push edi
   981                                  
   982 0000728A 0FB67806                	movzx edi, byte [eax+6]
   983 0000728E 21F9                    	and ecx, edi
   984 00007290 0F84C2010000            	jz retboundcube_3dn
   985                                  
   986 00007296 0F6F35[70680000]        	movq mm6, qword [_ztabasm+MAXZSIZ*16]
   987 0000729D 0F6F3D[78680000]        	movq mm7, qword [_ztabasm+MAXZSIZ*16+8]
   988 000072A4 0FB77804                	movzx edi, word [eax+4]
   989 000072A8 C1E704                  	shl edi, 4
   990 000072AB 0F0FB7[70280000]9E      	pfadd mm6, qword [_ztabasm+edi]
   991 000072B3 0F0FBF[78280000]9E      	pfadd mm7, qword [_ztabasm+edi+8]
   992 000072BB 0F6FC7                  	movq mm0, mm7
   993 000072BE 0F6605[A0680000]        	pcmpgtd mm0, qword [_scisdist]
   994 000072C5 0F7EC2                  	movd edx, mm0
   995 000072C8 85D2                    	test edx, edx
   996 000072CA 0F8488010000            	jz retboundcube_3dn
   997                                  
   998 000072D0 8D0CCD[00000000]        	lea ecx, [_ptfaces16+ecx*8]
   999                                  
  1000 000072D7 0FB65901                	movzx ebx, byte [ecx+1]
  1001 000072DB 0FB67902                	movzx edi, byte [ecx+2]
  1002 000072DF 0F6F83[F0270000]        	movq mm0, qword [_caddasm+ebx]
  1003 000072E6 0F6F8F[F0270000]        	movq mm1, qword [_caddasm+edi]
  1004 000072ED 0F0FC69E                	pfadd mm0, mm6              ;mm0: [   y0    x0]
  1005 000072F1 0F0FCE9E                	pfadd mm1, mm6              ;mm1: [   y1    x1]
  1006 000072F5 0F6EAB[F8270000]        	movd mm5,  [_caddasm+ebx+8] ; _MANUAL FIX_ Remove DWORD prefix from operand 2
  1007 000072FC 0F62AF[F8270000]        	punpckldq mm5,  [_caddasm+edi+8] ; _MANUAL FIX_ Remove DWORD prefix from operand 2
  1008 00007303 0F0FEF9E                	pfadd mm5, mm7              ;mm5: [   z1    z0]
  1009 00007307 0F0FE596                	pfrcp mm4, mm5              ;mm4: [ 1/z0  1/z0]
  1010 0000730B 0F6AED                  	punpckhdq mm5, mm5          ;mm5: [   z1    z1]
  1011 0000730E 0F0FED96                	pfrcp mm5, mm5              ;mm5: [ 1/z1  1/z1]
  1012 00007312 0F0FC4B4                	pfmul mm0, mm4              ;mm0: [y0/z0 x0/z0]
  1013 00007316 0F0FCDB4                	pfmul mm1, mm5              ;mm1: [y1/z1 x1/z1]
  1014 0000731A 0F0FC01D                	pf2id mm0, mm0              ;mm0: [  sy0   sx0]
  1015 0000731E 0F0FC91D                	pf2id mm1, mm1              ;mm1: [  sy1   sx1]
  1016 00007322 0F6BC1                  	packssdw mm0, mm1           ;mm0: [sy1 sx1 sy0 sx0]
  1017                                  
  1018 00007325 0FB65903                	movzx ebx, byte [ecx+3]
  1019 00007329 0FB67904                	movzx edi, byte [ecx+4]
  1020 0000732D 0F6F93[F0270000]        	movq mm2, qword [_caddasm+ebx]
  1021 00007334 0F6F9F[F0270000]        	movq mm3, qword [_caddasm+edi]
  1022 0000733B 0F0FD69E                	pfadd mm2, mm6              ;mm2: [   y2    x2]
  1023 0000733F 0F0FDE9E                	pfadd mm3, mm6              ;mm3: [   y3    x3]
  1024 00007343 0F6EAB[F8270000]        	movd mm5, [_caddasm+ebx+8] ; _MANUAL FIX_ Remove DWORD prefix from operand 2
  1025 0000734A 0F62AF[F8270000]        	punpckldq mm5, [_caddasm+edi+8] ; _MANUAL FIX_ Remove DWORD prefix from operand 2
  1026 00007351 0F0FEF9E                	pfadd mm5, mm7              ;mm5: [   z3    z2]
  1027 00007355 0F0FE596                	pfrcp mm4, mm5              ;mm4: [ 1/z2  1/z2]
  1028 00007359 0F6AED                  	punpckhdq mm5, mm5          ;mm5: [   z3    z3]
  1029 0000735C 0F0FED96                	pfrcp mm5, mm5              ;mm5: [ 1/z3  1/z3]
  1030 00007360 0F0FD4B4                	pfmul mm2, mm4              ;mm2: [y2/z2 x2/z2]
  1031 00007364 0F0FDDB4                	pfmul mm3, mm5              ;mm3: [y3/z3 x3/z3]
  1032 00007368 0F0FD21D                	pf2id mm2, mm2              ;mm2: [  sy2   sx2]
  1033 0000736C 0F0FDB1D                	pf2id mm3, mm3              ;mm3: [  sy3   sx3]
  1034 00007370 0F6BD3                  	packssdw mm2, mm3           ;mm2: [sy3 sx3 sy2 sx2]
  1035                                  
  1036 00007373 0F6FC8                  	movq mm1, mm0
  1037 00007376 0FEAC2                  	pminsw mm0, mm2             ;mm0: [sy1 sx1 sy0 sx0] <-min
  1038 00007379 0FEECA                  	pmaxsw mm1, mm2             ;mm1: [sy1 sx1 sy0 sx0] <-max
  1039                                  
  1040 0000737C 803904                  	cmp byte [ecx], 4
  1041 0000737F 7454                    	je short bcskip6case_3dn
  1042                                  
  1043 00007381 0FB65905                	movzx ebx, byte [ecx+5]
  1044 00007385 0FB67906                	movzx edi, byte [ecx+6]
  1045 00007389 0F6F93[F0270000]        	movq mm2, qword [_caddasm+ebx]
  1046 00007390 0F6F9F[F0270000]        	movq mm3, qword [_caddasm+edi]
  1047 00007397 0F0FD69E                	pfadd mm2, mm6              ;mm2: [   y4    x4]
  1048 0000739B 0F0FDE9E                	pfadd mm3, mm6              ;mm3: [   y5    x5]
  1049 0000739F 0F6EAB[F8270000]        	movd mm5, [_caddasm+ebx+8] ; _MANUAL FIX_ Remove DWORD prefix from operand 2
  1050 000073A6 0F62AF[F8270000]        	punpckldq mm5, [_caddasm+edi+8] ; _MANUAL FIX_ Remove DWORD prefix from operand 2
  1051 000073AD 0F0FEF9E                	pfadd mm5, mm7              ;mm5: [   z5    z4]
  1052 000073B1 0F0FE596                	pfrcp mm4, mm5              ;mm4: [ 1/z4  1/z4]
  1053 000073B5 0F6AED                  	punpckhdq mm5, mm5          ;mm5: [   z5    z5]
  1054 000073B8 0F0FED96                	pfrcp mm5, mm5              ;mm5: [ 1/z5  1/z5]
  1055 000073BC 0F0FD4B4                	pfmul mm2, mm4              ;mm2: [y4/z4 x4/z4]
  1056 000073C0 0F0FDDB4                	pfmul mm3, mm5              ;mm3: [y5/z5 x5/z5]
  1057 000073C4 0F0FD21D                	pf2id mm2, mm2              ;mm2: [  sy4   sx4]
  1058 000073C8 0F0FDB1D                	pf2id mm3, mm3              ;mm3: [  sy5   sx5]
  1059 000073CC 0F6BD3                  	packssdw mm2, mm3           ;mm2: [sy5 sx5 sy4 sx4]
  1060                                  
  1061 000073CF 0FEAC2                  	pminsw mm0, mm2             ; mm0: [my1,mx1,my0,mx0]
  1062 000073D2 0FEECA                  	pmaxsw mm1, mm2             ; mm1: [My1,Mx1,My0,Mx0]
  1063                                  bcskip6case_3dn:
  1064                                  
  1065 000073D5 0F70D00E                	pshufw mm2, mm0, 0eh        ; mm2: [my0,mx0,my1,mx1]
  1066 000073D9 0F70D90E                	pshufw mm3, mm1, 0eh        ; mm3: [My0,Mx0,My1,Mx1]
  1067 000073DD 0FEAC2                  	pminsw mm0, mm2             ; mm0: [  ?,  ?, my, mx]
  1068 000073E0 0FEECB                  	pmaxsw mm1, mm3             ; mm1: [  ?,  ?, My, Mx]
  1069 000073E3 0F62C1                  	punpckldq mm0, mm1          ; mm0: [ My, Mx, my, mx]
  1070                                  
  1071                                  		;See SCRCLP2D.BAS for a derivation of these 4 lines:
  1072 000073E6 0FED05[B8700000]        	paddsw mm0, [_qsum0]        ; mm0: ["+?,"+?,"+?,"+?]    Û ; _MANUAL FIX_ square-bracketed operand 2
  1073 000073ED 0FEE05[C0700000]        	pmaxsw mm0, [_qsum1]        ; mm0: [sy1,sx1,sy0,sx0]    Û ; _MANUAL FIX_ square-bracketed operand 2
  1074 000073F4 0F70C8EE                	pshufw mm1, mm0, 0eeh       ; mm1: [sy1,sx1,sy1,sx1]    Û
  1075 000073F8 0FD9C8                  	psubusw mm1, mm0            ; mm1: [  0,  0, dy, dx]    Ý
  1076                                  		;kv6frameplace -= ((32767-yres)*bpl + (32767-xres)*4);
  1077                                  
  1078 000073FB 0F7ECA                  	movd edx, mm1               ; edx: [ dy, dx]            Û
  1079 000073FE 0FF505[C8700000]        	pmaddwd mm0, [_qbplbpp]     ; mm0: [      ?,   offs]    Û±± (=y*bpl+x*bpp) ; _MANUAL FIX_ square-bracketed operand 2
  1080 00007405 0F7ECB                  	movd ebx, mm1               ; ebx: [ dy, dx]            Ý
  1081 00007408 81E2FFFF0000            	and edx, 0ffffh             ; ebx: [  0, dx]            Ý
  1082 0000740E 7448                    	jz short retboundcube_3dn   ;                           Ý
  1083 00007410 81EB00000100            	sub ebx, 65536              ;                           Ý
  1084 00007416 7240                    	jc short retboundcube_3dn   ;                           Ý
  1085                                  
  1086 00007418 0FB67807                	movzx edi, byte [eax+7]
  1087 0000741C 0F6028                  	punpcklbw mm5, [eax]
  1088 0000741F 0FE42CFD[B0680000]      	pmulhuw mm5, [_kv6colmul+edi*8]
  1089 00007427 0FFD2D[B0700000]        	paddw mm5, [_kv6coladd] ; _MANUAL FIX_ square-bracketed operand 2
  1090 0000742E 0F67ED                  	packuswb mm5, mm5
  1091 00007431 0F7EC7                  	movd edi, mm0               ; edi: offs
  1092                                  
  1093 00007434 8DBC9788888888          	lea edi, [edi+edx*4+88888888h] ;_kv6frameplace
  1094                                  bcmod0_3dn:
  1095 0000743B F7DA                    	neg edx
  1096 0000743D 0F6ECA                  	movd mm1, edx
  1097                                  %ifdef USEZBUFFER
  1098                                  	lea eax, [edi+88888888h] ;_zbufoff
  1099                                  bcmod1_3dn:
  1100                                  %endif
  1101                                  boundcubenextline_3dn:
  1102 00007440 0F7EC9                  	movd ecx, mm1
  1103                                  begstosb_3dn:
  1104                                  %ifdef USEZBUFFER
  1105                                  	movq mm0, mm7
  1106                                  	pcmpgtd mm0, [eax+ecx*4]
  1107                                  	movd edx, mm0
  1108                                  	test edx, edx
  1109                                  	jnz short skipdrawpix_3dn
  1110                                  	movd dword [eax+ecx*4], mm7
  1111                                  %endif
  1112 00007443 0F7E2C8F                	movd dword [edi+ecx*4], mm5
  1113                                  skipdrawpix_3dn:
  1114 00007447 41                      	inc ecx
  1115 00007448 75F9                    	jnz begstosb_3dn
  1116                                  %ifdef USEZBUFFER
  1117                                  	add eax, 88888888h; _kv6bytesperline
  1118                                  bcmod2_3dn:
  1119                                  %endif
  1120 0000744A 81C788888888            	add edi, 88888888h ;_kv6bytesperline
  1121                                  bcmod3_3dn:
  1122                                  
  1123 00007450 81EB00000100            	sub ebx, 65536
  1124 00007456 73E8                    	jnc short boundcubenextline_3dn
  1125                                  
  1126                                  retboundcube_3dn:
  1127 00007458 5F                      	pop edi    ;Visual C's _cdecl requires EBX,ESI,EDI,EBP to be preserved
  1128 00007459 5B                      	pop ebx
  1129 0000745A C3                      	retn
  1130                                  
  1131                                  _dep_protect_end:
  1132                                  ;.text ENDS
  1133                                  ;END
